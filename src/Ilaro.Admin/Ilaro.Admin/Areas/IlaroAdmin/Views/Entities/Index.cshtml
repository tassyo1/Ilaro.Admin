@model EntitiesIndexModel

@{
    Layout = "~/Areas/IlaroAdmin/Views/Shared/_Layout.cshtml";
    ViewBag.Title = Model.Entity.Verbose.Plural;
}

@section Breadcrumb
{
    <ul class="breadcrumb">
        <li>@Html.ActionLink(IlaroAdminResources.Index_Title, "Index", "Group", new { area = "IlaroAdmin" }, null)</li>
        <li>@Html.ActionLink(Model.Entity.Verbose.Group, "Details", "Group", new { area = "IlaroAdmin", groupName = Model.Entity.Verbose.Group }, null)</li>
        <li class="active">@Model.Entity.Verbose.Plural</li>
    </ul>
}

<div class="clearfix">
    <h2 class="pull-left">@Model.Entity.Verbose.Plural</h2>
    @if (Model.Entity.IsSearchActive)
    {
        using (Html.BeginForm("Index", "Entities", new { area = "IlaroAdmin", page = Model.Pager.Current }, FormMethod.Get, new { @class = "pull-left col-md-3" }))
        {
            foreach (var filter in Model.ActiveFilters)
            {
                @Html.Hidden(filter.Property.Name, filter.Value)
            }
            @Html.Hidden("entityName", Model.Entity.Name)
            @Html.Hidden(Model.Configuration.PerPageRequestName, Model.TableInfo.PerPage)
            @Html.Hidden(Model.Configuration.OrderRequestName, Model.TableInfo.Order)
            @Html.Hidden(Model.Configuration.OrderDirectionRequestName, Model.TableInfo.OrderDirection)
            <div class="input-group">
                @Html.TextBox(Model.Configuration.SearchQueryRequestName, Model.TableInfo.SearchQuery, new { @class = "form-control" })
                <span class="input-group-btn">
                    <button class="btn btn-default" type="submit">@IlaroAdminResources.Search</button>
                </span>
            </div>
        }
    }

    @if (Model.ChangeEnabled)
    {
        @Html.ActionLink(IlaroAdminResources.Changes, "Changes", new { entityName = Model.Entity.Name }, new { @class = "btn btn-link pull-left" })
    }
    @if (Model.Entity.AllowAdd)
    {
        <a href="@Url.Action("Create", "Entity", new { area = "IlaroAdmin", entityName = Model.Entity.Name })" class="btn btn-primary pull-right"><span class="glyphicon glyphicon-plus"></span> @IlaroAdminResources.Add</a>
    }
</div>

<div class="clearfix" style="margin-bottom:10px">
    <div class="btn-group btn-group-sm pull-right">
        <button class="btn btn-default active" id="make-table-large"><span class="glyphicon glyphicon-th-large"></span></button>
        <button class="btn btn-default" id="make-table-condensed"><span class="glyphicon glyphicon-th"></span></button>
    </div>
</div>

<table id="table-entity" class="table table-striped table-bordered table-hover">
    <thead>
        <tr>
            @*<th class="min-width"><input type="checkbox" id="check-all" /></th>*@
            @foreach (var column in Model.Columns)
            {
                <th>
                    <span @Html.Condition(!string.IsNullOrEmpty(column.Description), () => "title=\"" + column.Description + "\"")>
                        @Html.SortColumnLink(Model.Entity, column, Model.Filters, Model.TableInfo.SearchQuery, Model.TableInfo.PerPage)
                        <i class="glyphicon glyphicon-chevron-@column.SortDirection"></i>
                    </span>
                </th>
            }
            @if (Model.Entity.LinksCount() > 0)
            {
                <th colspan="@Model.Entity.LinksCount()"></th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in Model.Data)
        {
            <tr>
                @*<td><input type="checkbox" class="row-checkbox" /></td>*@
                @foreach (var item in row.Values)
                {
                    <td>@Html.DisplayFor(m => item, item.Property.Template.Display)</td>
                }
                @if (!Model.Entity.Links.Display.IsNullOrEmpty())
                {
                    <td class="min-width">
                        <a href="@string.Format(Model.Entity.Links.Display, row.JoinedKeyValue)" class="btn btn-xs btn-link"><span class="glyphicon glyphicon-eye-open"></span> @IlaroAdminResources.View</a>
                    </td>
                }
                @if (Model.Entity.AllowEdit)
                {
                    <td class="min-width">
                        @if (!Model.Entity.Links.Edit.IsNullOrEmpty())
                        {
                            <a href="@string.Format(Model.Entity.Links.Edit, row.JoinedKeyValue)" class="btn btn-xs btn-link"><span class="glyphicon glyphicon-edit"></span> @IlaroAdminResources.Edit</a>
                        }
                        else
                        {
                            <a href="@Url.Action("Edit", "Entity", new { area = "IlaroAdmin", entityName = Model.Entity.Name, key = row.JoinedKeyValue })" class="btn btn-xs btn-link"><span class="glyphicon glyphicon-edit"></span> @IlaroAdminResources.Edit</a>
                        }
                    </td>
                }
                @if (Model.Entity.AllowDelete)
                {
                    <td class="min-width">
                        @if (!Model.Entity.Links.Delete.IsNullOrEmpty())
                        {
                            <a href="@string.Format(Model.Entity.Links.Delete, row.JoinedKeyValue)" class="btn btn-xs btn-link text-danger"><span class="glyphicon glyphicon-remove"></span> @IlaroAdminResources.Delete</a>
                        }
                        else
                        {
                            <a href="@Url.Action("Delete", "Entity", new { area = "IlaroAdmin", entityName = Model.Entity.Name, key = row.JoinedKeyValue })" class="btn btn-xs btn-link text-danger"><span class="glyphicon glyphicon-remove"></span> @IlaroAdminResources.Delete</a>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<div class="clearfix">
    <div class="pull-left" style="margin-right:10px">
        @using (Html.BeginForm("Index", "Entities", new { area = "IlaroAdmin", page = Model.Pager.Current }, FormMethod.Get, new { @class = "form-inline" }))
        {
            foreach (var filter in Model.ActiveFilters)
            {
                @Html.Hidden(filter.Property.Name, filter.Value)
            }
            @Html.Hidden("entityName", Model.Entity.Name)
            @Html.Hidden(Model.Configuration.SearchQueryRequestName, Model.TableInfo.SearchQuery)
            @Html.Hidden(Model.Configuration.OrderRequestName, Model.TableInfo.Order)
            @Html.Hidden(Model.Configuration.OrderDirectionRequestName, Model.TableInfo.OrderDirection)
            <div class="form-group">
                <label for="@Model.Configuration.PerPageRequestName" class="control-label">@IlaroAdminResources.OnPage</label>
                @Html.DropDownList(Model.Configuration.PerPageRequestName,
                 new SelectList(new Dictionary<int, int> { { 5, 5 }, { 10, 10 }, { 15, 15 }, { 20, 20 }, { 25, 25 }, { 50, 50 }, { 100, 100 } }, "Key", "Value", Model.TableInfo.PerPage),
                 new Dictionary<string, object> { { "class", "autoPostBack form-control" }, { "id", "per-page-entity" } })
            </div>
        }
    </div>

    <div class="pull-left" style="margin-right:10px">
        @{Html.RenderPartial("_Paging", Model.Pager);}
    </div>

    <div class="pull-left" style="line-height:29px">
        @IlaroAdminResources.Founded <strong>@Model.Pager.TotalItems</strong>
    </div>
</div>

@section Sidebar
{
    @if (Model.Filters.Count > 0)
    {
        <h2>@IlaroAdminResources.Filters</h2>
        <ul class="nav nav-list">
            <li><a href="@Url.Action("Index", "Entities", new { area = "IlaroAdmin", entityName = Model.Entity.Name, page = Model.Pager.Current })">@IlaroAdminResources.RemoveFilters</a></li>
            @foreach (var filter in Model.Filters)
            {
                Html.RenderPartial("_Filter", filter);
            }
        </ul>
    }
}

@section Scripts
{
    <script type="text/javascript">
        $().ready(function () {
            $('table th #check-all').click(function () {
                var $this = $(this);
                var isChecked = $this.prop('checked');
                $this.parents('table').find('.row-checkbox').prop('checked', isChecked);
            });
            $('table tr').click(function () {
                var $this = $(this);
                var $checkbox = $this.find('.row-checkbox');
                //$checkbox.prop('checked', !$checkbox.prop('checked'));
            });
            $('#make-table-large').click(function () {
                var $this = $(this).addClass('active').siblings().removeClass('active');
                $('#table-entity').removeClass('table-condensed');
                $('#pagination-entity').removeClass('pagination-sm');
                $('#per-page-entity').removeClass('select-sm');
            });
            $('#make-table-condensed').click(function () {
                var $this = $(this).addClass('active').siblings().removeClass('active');
                $('#table-entity').addClass('table-condensed');
                $('#pagination-entity').addClass('pagination-sm');
                $('#per-page-entity').addClass('select-sm');
            });
        });
    </script>
}
