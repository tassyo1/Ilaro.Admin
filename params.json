{"name":"Ilaro.admin","tagline":"Generic admin panel for ASP.NET MVC.","body":"Ilaro.Admin\r\n===========\r\n\r\nIlaro.Admin creates for you admin panel using only POCO classes.\r\n\r\n[Demo](http://admin.ilaro.net/) - using Northwind DB (with small modifications, removed multiple primary keys)\r\n\r\nProject was inspired by [Django admin site](https://docs.djangoproject.com/en/dev/ref/contrib/admin/).\r\n\r\nPlease keep in mind this is still a alpha version.\r\n\r\nGet it from nuget:\r\n\r\nIf you are using Unity install:\r\n```\r\nInstall-Package Ilaro.Admin.Unity\r\n```\r\nOr if you using Ninject install:\r\n```\r\nInstall-Package Ilaro.Admin.Ninject\r\n```\r\nOr you can just install:\r\n```\r\nInstall-Package Ilaro.Admin\r\n```\r\nAnd register by yourself all needed stuff.\r\n\r\n##TODO\r\nI don't plan milestones, so I will do things in random order. \r\nMaybe some of them I skip, and I probably I will back to them after release v1.\r\n\r\nI moved [TODO](https://github.com/rgonek/Ilaro.Admin/wiki/TODO) to wiki pages, because here, it did a mess in commits, and I rather would simple list than a issues pages.\r\n\r\n##Requirements:\r\n- POCO classes (or pseudo POCO)\r\n- ASP MVC 4\r\n\r\n##Initialisation:\r\n\r\nIn global.asax you must do three things:\r\n\r\n1. Register routes\r\n\r\n   ```C#\r\n   // prefix is optional, by default = IlaroAdmin\r\n   AdminInitialise.RegisterRoutes(RouteTable.Routes, prefix: \"Admin\");\r\n   AdminInitialise.RegisterResourceRoutes(RouteTable.Routes);\r\n   ```\r\n   It should be before register default routes because you lose a friendly urls\r\n2. Add entities\r\n\r\n   ```C#\r\n   AdminInitialise.AddEntity<Customer>();\r\n   AdminInitialise.AddEntity<Product>();\r\n   ```\r\n   AddEntity method create a EntityViewModel object with all info from attributes.\r\n   In future I want add here a fluent configuration of entity so, there is no need to configure entity with attributes.\r\n3. Specify access to Ilaro.Admin\r\n\r\n   ```C#\r\n   AdminInitialise.Authorize = new System.Web.Mvc.AuthorizeAttribute { Roles = \"Admin\" };\r\n   ```\r\n   If you don't do that everyone with proper link have access to Ilaro.Admin.\r\n4. Initialise Ilaro.Admin\r\n\r\n   ```C#\r\n   AdminInitialise.Initialise(\"NorthwindEntities\");\r\n   ```\r\n   This line initialise UnityContainer, and bind foreign entity and try set primary key for each entity who has not defeined it. If you have only one ConnectionString there is no need to specify it.\r\n5. Go to wiki pages for more info. [Entity configuration](https://github.com/rgonek/Ilaro.Admin/wiki/Entity-configuration) [Property configuration](https://github.com/rgonek/Ilaro.Admin/wiki/Property-configuration)\r\n   \r\nAnd after that when you go to ~/IlaroAdmin url (if you don't define a other prefix) and you should view something like that:\r\n####Dashboard\r\n![Ilaro.Admin dashboard](https://dl.dropboxusercontent.com/u/3659823/IlaroAdmin/dashboard.png)\r\n####Records list\r\n![Ilaro.Admin records list](https://dl.dropboxusercontent.com/u/3659823/IlaroAdmin/entity_details.png)\r\n####Create new record\r\n![Ilaro.Admin create new record](https://dl.dropboxusercontent.com/u/3659823/IlaroAdmin/create_new_record.png)\r\n\r\n##What I use\r\nHere I will try write all libraries, and part of code I use in project.\r\n- [**Massive**](https://github.com/robconery/massive) - for db access. I Removed lots methods I left only read methods, thanks that I have much better control on created commands, and in future I want to completely removed massive.\r\n- [**ImageResizer**](http://imageresizing.net/) - for resizing image. There's no much need to use this library, you can easy get rid off it, but I like it :)\r\n- [**RazorGenerator**](http://razorgenerator.codeplex.com/) and [extension](http://visualstudiogallery.msdn.microsoft.com/1f6ec6ff-e89b-4c47-8e79-d2d68df894ec) - for generating source code from views, thanks that you don't have add views into your project, just simply add dll. Of cource if you want you can add views files which overrides compiled views\r\n- [**Twitter bootstrap**](http://getbootstrap.com/)\r\n- [**Chosen**](http://harvesthq.github.io/chosen/) and bootstrap style for it https://gist.github.com/koenpunt/6424137\r\n- [**Bootstrap-DateTimePicker**](https://github.com/Eonasdan/bootstrap-datetimepicker) - for DateTime picker, Date picker and Time picker\r\n- [**Bootstrap-SpinEdit**](https://github.com/scyv/bootstrap-spinedit) - for numeric editor\r\n- [**Bootstrap-Markdown**](http://toopay.github.io/bootstrap-markdown/) - for markdown editor\r\n- [**Marked**](https://github.com/chjj/marked) - for parsing markdown\r\n- [**Summernote**](https://github.com/HackerWins/summernote) - for html wysiwyg editor\r\n- [**Bootstrap Dual Listbox**](http://www.virtuosoft.eu/code/bootstrap-duallistbox/) - for one to many editor\r\n- [**Bootstrap-file-input**](https://github.com/grevory/bootstrap-file-input) - file input\r\n\r\n##Knowing issue\r\n-  Validation - for validate entity I using data annotations attributes (it probably works with custom ValidationAttribute), and client side validation look nice, but problem starts with server side validation.\r\n  \r\n   ```C#\r\n[Required]\r\n[StringLength(20)]\r\n[Compare(\"Other property\")]\r\npublic string ProductName { get; set; }\r\n   ```\r\n   In this example Required and StringLength works well but there is problem with Compare (in client side works well).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}